name: Build

on:
  pull_request:
    branches:
      - main

jobs:
  get-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.genversion.outputs.version }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: "0"
      - name: Generate package version from Git tag
        id: genversion
        run: |
          echo "version=$(git describe --tags --always --match=v* | sed 's/^v//' | cut -d- -f1,2)" >> "$GITHUB_OUTPUT"

  build-linux:
    runs-on: ubuntu-latest
    needs: get-version
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-musl
            command: cargo
          - target: aarch64-unknown-linux-musl
            command: cross
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: "0"
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        id: toolchain
        with:
          targets: ${{ matrix.target }}
      - name: Install cross
        if: matrix.command == 'cross'
        shell: bash
        run: |
          curl -L --proto '=https' --tlsv1.2 -sSf https://raw.githubusercontent.com/cargo-bins/cargo-binstall/main/install-from-binstall-release.sh | bash
          cargo binstall --no-confirm cross
      - name: Cache rust build
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            target
          key: rust-build-${{ runner.os }}-${{ matrix.target }}-${{ steps.toolchain.outputs.cachekey }}-${{ hashFiles('Cargo.lock') }}
      - name: Install musl tools
        run: sudo apt-get install -y musl-tools
      - uses: taiki-e/cache-cargo-install-action@v2
        with:
          tool: cargo-edit
      - name: Set package version
        env:
          VERSION: ${{ needs.get-version.outputs.version }}
        run: |
          cargo set-version "${VERSION}"
      - name: Run tests
        run: ${{ matrix.command }} test --locked --target ${{ matrix.target }}
      - name: Build binary
        run: ${{ matrix.command }} build --locked --target ${{ matrix.target }}
      - name: Upload binary
        uses: actions/upload-artifact@v4
        with:
          name: kubectl-split_config-${{ matrix.target }}
          path: target/${{ matrix.target }}/debug/kubectl-split_config
          retention-days: 7
  build-macos:
    runs-on: macos-latest
    needs: get-version
    strategy:
      matrix:
        target:
          - x86_64-apple-darwin
          - aarch64-apple-darwin
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: "0"
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        id: toolchain
        with:
          targets: ${{ matrix.target }}
      - name: Cache rust build
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            target
          key: rust-build-${{ runner.os }}-${{ matrix.target }}-${{ steps.toolchain.outputs.cachekey }}-${{ hashFiles('Cargo.lock') }}
      - uses: taiki-e/cache-cargo-install-action@v2
        with:
          tool: cargo-edit
      - name: Set package version
        env:
          VERSION: ${{ needs.get-version.outputs.version }}
        run: |
          cargo set-version "${VERSION}"
      - name: Run tests
        if: ${{ matrix.target == 'x86_64-apple-darwin' }}
        run: cargo test --locked --target ${{ matrix.target }}
      - name: Build binary
        run: cargo build --locked --target ${{ matrix.target }}
      - name: Upload binary
        uses: actions/upload-artifact@v4
        with:
          name: kubectl-split_config-${{ matrix.target }}
          path: target/${{ matrix.target }}/debug/kubectl-split_config
          retention-days: 7
